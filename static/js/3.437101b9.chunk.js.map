{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","shared/validation.js","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["input","props","inputElement","validationError","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","className","ValidationError","valueType","elementType","join","elementConfig","value","onChange","changed","options","map","option","displayValue","string","Input","Label","error","charAt","toUpperCase","slice","toLowerCase","LabelElement","label","module","exports","checkValidity","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","isNumeric","checkoutSummary","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","click","checkoutCancelled","checkoutContinued","withErrorHandler","useState","name","type","placeholder","validation","valid","email","street","postalCode","country","deliveryMethod","orderForm","setOrderForm","formIsValid","setFormIsValid","ings","useSelector","state","burgerBuilder","price","totalPrice","loading","order","token","auth","userId","dispatch","useDispatch","formElementsArray","key","id","config","form","onSubmit","e","preventDefault","formData","formElementIdentifier","orderData","orderActions","onOrderBurger","toFixed","history","formElement","inputIdentifier","updatedFormElement","updateObject","target","updatedOrderForm","inputChangedHandler","disabled","Spinner","ContactData","axios","Checkout","purchased","summary","to","purchasedRedirect","goBack","replace","path","match","component"],"mappings":"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","file":"static/js/3.437101b9.chunk.js","sourcesContent":["import { string } from \"prop-types\";\nimport React from \"react\";\nimport classes from './Input.module.css';\n\nconst input = (props) => {\n    let inputElement;\n    const inputClasses = [classes.InputElement];\n    let validationError;\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n        validationError = <p className={classes.ValidationError}>Please enter a valid {props.valueType}</p>;\n    }\n\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}/>\n            break;\n        case ('textarea'):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}/>\n            break;\n        case ('select'):\n            inputElement =\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option\n                            key={option.value}\n                            value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}/>\n    }\n    let capitalize = (string) => {return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();}\n    return (\n        <div className={classes.Input}>\n            <h3 className={classes.Label}>{capitalize(props.elementConfig.error)}</h3>\n            <label className={classes.LabelElement}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n    )\n\n}\n\nexport default input;\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"LabelElement\":\"Input_LabelElement__t-mOv\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\",\"ValidationError\":\"Input_ValidationError__qMR97\",\"Label\":\"Input_Label__1qyHr\"};","export const checkValidity = (value, rules) => {\n    let isValid = true;\n    if (!rules) {\n        return true;\n    }\n\n    if (rules.required) {\n        isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid\n    }\n\n    if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid\n    }\n\n    if (rules.isEmail) {\n        const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n        isValid = pattern.test(value) && isValid\n    }\n\n    if (rules.isNumeric) {\n        const pattern = /^\\d+$/;\n        isValid = pattern.test(value) && isValid\n    }\n\n    return isValid;\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\"};","import React from \"react\";\nimport classes from './CheckoutSummary.module.css';\nimport Burger from './../../Burger/Burger';\nimport Button from './../../UI/Button/Button';\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!</h1>\n            <div style={{width: '100%', margin: 'auto'}}>\n                <Burger ingredients={props.ingredients}/>\n            </div>\n            <Button btnType=\"Danger\" click={props.checkoutCancelled}>CANCEL</Button>\n            <Button btnType=\"Success\"  click={props.checkoutContinued}>CONTINUE</Button>\n        </div>\n    )\n}\n\nexport default checkoutSummary;","import React, {useState} from \"react\";\nimport Button from './../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios/axios-orders';\nimport Spinner from './../../../components/UI/Spinner/Spinner';\nimport Input from './../../../components/UI/Input/Input';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\nimport * as orderActions from \"../../../store/actions/index\";\nimport { updateObject } from \"../../../shared/utility\";\nimport { checkValidity } from '../../../shared/validation';\n\nconst ContactData = props => {\n\n    const [orderForm, setOrderForm] = useState({\n        name: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Your Name',\n                error: 'name'\n            },\n            value: '',\n            validation: {\n                required: true\n            },\n            valid: false,\n            touched: false\n        },\n        email: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'email',\n                placeholder: 'Your Email',\n                error: 'email'\n            },\n            value: '',\n            validation: {\n                required: true,\n                isEmail: true\n            },\n            valid: false,\n            touched: false\n        },\n        street: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Your Street',\n                error: 'street'\n            },\n            value: '',\n            validation: {\n                required: true\n            },\n            valid: false,\n            touched: false\n        },\n        postalCode: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Your Postal Code',\n                error: 'postal code'\n            },\n            value: '',\n            validation: {\n                required: true,\n                minLength: 5,\n                maxLength: 5,\n                isNumeric: true\n            },\n            valid: false,\n            touched: false\n        },\n        country: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Your Country',\n                error: 'country'\n            },\n            value: '',\n            validation: {\n                required: true\n            },\n            valid: false,\n            touched: false\n        },\n        deliveryMethod: {\n            elementType: 'select',\n            elementConfig: {\n                options: [\n                    {value: 'fastest', displayValue: 'Fastest'},\n                    {value: 'cheapest', displayValue: 'Cheapest'},\n                ]\n            },\n            value: 'fastest',\n            validation: {},\n            valid: true\n        }\n    });\n\n    const [formIsValid, setFormIsValid] = useState(false);\n\n    const ings = useSelector(state => state.burgerBuilder.ingredients);\n    const price = useSelector(state => state.burgerBuilder.totalPrice);\n    const loading = useSelector(state => state.order.loading);\n    const token = useSelector(state => state.auth.token);\n    const userId = useSelector(state => state.auth.userId);\n\n    const dispatch = useDispatch();\n\n    const onOrderBurger = (orderData, token) => dispatch(orderActions.purchaseBurger(orderData, token));\n\n    const orderHandler = (e) => {\n        e.preventDefault();\n\n        const formData = {};\n\n        for (let formElementIdentifier in orderForm) {\n            formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\n        }\n\n        const order = {\n            ingredients: ings,\n            price: price.toFixed(2),\n            orderData: formData,\n            userId: userId\n        }\n\n        onOrderBurger(order, token);\n        props.history.push('/');\n    }\n\n    const inputChangedHandler = (e, inputIdentifier) => {\n\n        const updatedFormElement = updateObject(orderForm[inputIdentifier], {\n            value: e.target.value,\n            valid: checkValidity(e.target.value, orderForm[inputIdentifier].validation),\n            touched: true\n        });\n        const updatedOrderForm = updateObject(orderForm, {\n            [inputIdentifier]: updatedFormElement\n        });\n\n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n\n        setOrderForm(updatedOrderForm)\n        setFormIsValid(formIsValid);\n    }\n\n    const formElementsArray = [];\n    for (let key in orderForm) {\n        formElementsArray.push({\n            id: key,\n            config: orderForm[key]\n        })\n    }\n\n    let form = (\n        <form onSubmit={orderHandler}>\n            {formElementsArray.map(formElement => (\n                <Input\n                    key={formElement.id}\n                    elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    value={formElement.config.value}\n                    changed={(e) => inputChangedHandler(e, formElement.id)}\n                    invalid={!formElement.config.valid}\n                    shouldValidate={formElement.config.validation}\n                    touched={formElement.config.touched}\n                    valueType={formElement.config.elementConfig.error}/>\n            ))}\n            <Button btnType='Success' disabled={!formIsValid}>ORDER</Button>\n        </form>\n    )\n\n    if(loading) {\n        form = <Spinner/>;\n    }\n\n    return (\n        <div className={classes.ContactData}>\n            <h4>Enter Your Contact Data</h4>\n            {form}\n        </div>\n    )\n}\n\nexport default withErrorHandler(ContactData, axios);","import React from \"react\";\nimport CheckoutSummary from './../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from \"./ContactData/ContactData\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport {useSelector} from \"react-redux\";\n\nconst Checkout = props => {\n\n    const checkoutCancelledHandler = () => {\n        props.history.goBack();\n    }\n\n    const checkoutContinuedHandler = () => {\n        props.history.replace('/checkout/contact-data');\n    }\n\n    const ings = useSelector(state => state.burgerBuilder.ingredients)\n    const purchased = useSelector(state => state.order.purchased)\n\n    let summary = <Redirect to='/'/>\n    if (ings) {\n        const purchasedRedirect = purchased ? <Redirect to='/'/> : null;\n        summary = (\n            <div>\n                {purchasedRedirect}\n                <CheckoutSummary\n                    ingredients={ings}\n                    checkoutCancelled={checkoutCancelledHandler}\n                    checkoutContinued={checkoutContinuedHandler}/>\n                <Route path={props.match.path + '/contact-data'}\n                       component={ContactData}/>\n            </div>\n        )\n    }\n    return (\n        <div>\n            {summary}\n        </div>\n    )\n}\n\nexport default Checkout;"],"sourceRoot":""}