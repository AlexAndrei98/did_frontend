{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","shared/validation.js","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["input","props","inputElement","validationError","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","className","ValidationError","valueType","elementType","join","elementConfig","value","onChange","changed","options","map","option","displayValue","string","Input","Label","error","charAt","toUpperCase","slice","toLowerCase","LabelElement","label","module","exports","checkValidity","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","isNumeric","Auth","useState","email","type","placeholder","validation","valid","password","authForm","setAuthForm","isSignUp","setIsSignUp","loading","useSelector","state","auth","isAuthenticated","token","buildingBurger","burgerBuilder","building","authRedirectPath","dispatch","useDispatch","onSetAuthRedirectPath","useCallback","actions","useEffect","formElementsArray","key","id","config","errorMessage","form","formElement","e","event","controlName","updatedAuthForm","updateObject","target","inputChangedHandler","message","authRedirect","to","onSubmit","preventDefault","onAuth","btnType","click"],"mappings":"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","file":"static/js/5.305c678c.chunk.js","sourcesContent":["import { string } from \"prop-types\";\nimport React from \"react\";\nimport classes from './Input.module.css';\n\nconst input = (props) => {\n    let inputElement;\n    const inputClasses = [classes.InputElement];\n    let validationError;\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n        validationError = <p className={classes.ValidationError}>Please enter a valid {props.valueType}</p>;\n    }\n\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}/>\n            break;\n        case ('textarea'):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}/>\n            break;\n        case ('select'):\n            inputElement =\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option\n                            key={option.value}\n                            value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}/>\n    }\n    let capitalize = (string) => {return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();}\n    return (\n        <div className={classes.Input}>\n            <h3 className={classes.Label}>{capitalize(props.elementConfig.error)}</h3>\n            <label className={classes.LabelElement}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n    )\n\n}\n\nexport default input;\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"LabelElement\":\"Input_LabelElement__t-mOv\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\",\"ValidationError\":\"Input_ValidationError__qMR97\",\"Label\":\"Input_Label__1qyHr\"};","export const checkValidity = (value, rules) => {\n    let isValid = true;\n    if (!rules) {\n        return true;\n    }\n\n    if (rules.required) {\n        isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid\n    }\n\n    if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid\n    }\n\n    if (rules.isEmail) {\n        const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n        isValid = pattern.test(value) && isValid\n    }\n\n    if (rules.isNumeric) {\n        const pattern = /^\\d+$/;\n        isValid = pattern.test(value) && isValid\n    }\n\n    return isValid;\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};","import React, {useCallback, useEffect, useState} from \"react\";\nimport Input from './../../components/UI/Input/Input';\nimport Button from './../../components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport {Redirect} from 'react-router-dom';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport { updateObject } from \"../../shared/utility\";\nimport { checkValidity } from \"../../shared/validation\";\nimport Spinner from './../../components/UI/Spinner/Spinner';\nimport * as actions from './../../store/actions/index';\n\nconst Auth = () => {\n    const [authForm, setAuthForm] = useState({\n        email: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'email',\n                placeholder: 'Your Email',\n                error: 'email'\n            },\n            value: '',\n            validation: {\n                required: true,\n                isEmail: true\n            },\n            valid: false,\n            touched: false\n        },\n        password: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'password',\n                placeholder: 'Your Password',\n                error: 'password'\n            },\n            value: '',\n            validation: {\n                required: true,\n                minLength: 6\n            },\n            valid: false,\n            touched: false\n        }\n    });\n\n    const [isSignUp, setIsSignUp] = useState(true);\n\n    const loading = useSelector(state => state.auth.loading);\n    const error = useSelector(state => state.auth.error);\n    const isAuthenticated = useSelector(state => state.auth.token != null);\n    const buildingBurger = useSelector(state => state.burgerBuilder.building);\n    const authRedirectPath = useSelector(state => state.auth.authRedirectPath);\n\n    const dispatch = useDispatch();\n\n    const onAuth = (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp));\n    const onSetAuthRedirectPath = useCallback(() => dispatch(actions.setAuthRedirectPath('/')), [dispatch]);\n\n    useEffect( () => {\n        if(!buildingBurger && authRedirectPath !== '/') {\n            onSetAuthRedirectPath()\n        }\n    }, [onSetAuthRedirectPath, buildingBurger, authRedirectPath])\n\n\n    const inputChangedHandler = (event, controlName) => {\n        const updatedAuthForm = updateObject(authForm, {\n            [controlName]: updateObject(authForm[controlName], {\n                value: event.target.value,\n                valid: checkValidity(event.target.value, authForm[controlName].validation),\n                touched: true\n            })\n        })\n\n        setAuthForm(updatedAuthForm);\n    }\n\n    const submitHandler = (event) => {\n        event.preventDefault();\n        onAuth(authForm.email.value, authForm.password.value, isSignUp)\n    }\n\n    const switchAuthModeHandler = () => {\n        setIsSignUp(!isSignUp);\n    }\n\n\n    const formElementsArray = [];\n    for (let key in authForm) {\n        formElementsArray.push({\n            id: key,\n            config: authForm[key]\n        })\n    }\n\n    let form = (formElementsArray.map(formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                changed={(e) => inputChangedHandler(e, formElement.id)}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                valueType={formElement.config.elementConfig.error}/>\n        ))\n    )\n\n    if (loading) {\n        form = <Spinner/>\n    }\n\n    let errorMessage;\n    if(error) {\n        if(error.message === \"EMAIL_NOT_FOUND\") {\n            errorMessage = \"This email doesn't exist in the base.\"\n        } else if (error.message === \"INVALID_PASSWORD\" ||\n            error.message === \"MISSING_PASSWORD\") {\n            errorMessage = \"The password is invalid.\"\n        } else if (error.message === \"USER_DISABLED\") {\n            errorMessage = \"The user account has been disabled by an administrator.\"\n        } else if (error.message === \"EMAIL_EXISTS\") {\n            errorMessage = \"The email address is already in use by another account.\"\n        } else if (error.message === \"INVALID_EMAIL\") {\n            errorMessage = \"The email address is badly formatted.\"\n        }\n    }\n\n    let authRedirect = null;\n    if (isAuthenticated) {\n        authRedirect = <Redirect to={authRedirectPath}/>\n    }\n\n    return (\n        <div className={classes.Auth}>\n            {authRedirect}\n            <p>{errorMessage}</p>\n            <form onSubmit={submitHandler}>\n                {form}\n                <Button btnType='Success'>Submit</Button>\n            </form>\n            <Button btnType='Danger' click={switchAuthModeHandler}>\n                Switch to {isSignUp ? \"Signin\" : \"Signup\"}\n            </Button>\n        </div>\n    )\n}\n\nexport default Auth;"],"sourceRoot":""}